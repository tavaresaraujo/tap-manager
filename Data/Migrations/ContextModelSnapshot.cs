// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.AccountAggregate.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AddressId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<int>("MerchantId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("PhoneId");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Domain.AccountAggregate.Entities.AccountBeverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<int>("BeveragePriceId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BeveragePriceId");

                    b.ToTable("AccountBeverage");
                });

            modelBuilder.Entity("Domain.AddressAggregate.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("Complement")
                        .HasMaxLength(64);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Number")
                        .HasMaxLength(16);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.BeverageAggregate.Entities.Beverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AchoolPercentage");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Origin");

                    b.Property<string>("PictureUrl");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Beverage");
                });

            modelBuilder.Entity("Domain.BeverageAggregate.Entities.BeveragePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<bool>("Active");

                    b.Property<int>("Amount");

                    b.Property<int>("BeverageId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BeverageId");

                    b.ToTable("BeveragePrice");
                });

            modelBuilder.Entity("Domain.BeverageAggregate.Entities.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<int>("TapId");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("TapId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("Domain.MerchantAggregate.Entities.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Merchant");
                });

            modelBuilder.Entity("Domain.PhoneAggregate.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Domain.TapAggregate.Entities.Tap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BeveragePriceId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Status");

                    b.Property<string>("TargetUrl")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("BeveragePriceId");

                    b.ToTable("Tap");
                });

            modelBuilder.Entity("Domain.TransactionAggregate.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("Amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("GatewayCode")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.Consumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BeveragePriceId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.Property<int>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("BeveragePriceId");

                    b.HasIndex("UserId");

                    b.ToTable("Consumption");
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("Amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AddressId");

                    b.Property<int>("Amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("PhoneId");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PhoneId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.AccountAggregate.Entities.Account", b =>
                {
                    b.HasOne("Domain.AddressAggregate.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.MerchantAggregate.Entities.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.PhoneAggregate.Entities.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.AccountAggregate.Entities.AccountBeverage", b =>
                {
                    b.HasOne("Domain.AccountAggregate.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.BeverageAggregate.Entities.BeveragePrice", "BeveragePrice")
                        .WithMany()
                        .HasForeignKey("BeveragePriceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.BeverageAggregate.Entities.BeveragePrice", b =>
                {
                    b.HasOne("Domain.BeverageAggregate.Entities.Beverage", "Beverage")
                        .WithMany()
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.BeverageAggregate.Entities.Supply", b =>
                {
                    b.HasOne("Domain.TapAggregate.Entities.Tap", "Tap")
                        .WithMany()
                        .HasForeignKey("TapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.TapAggregate.Entities.Tap", b =>
                {
                    b.HasOne("Domain.BeverageAggregate.Entities.BeveragePrice", "BeveragePrice")
                        .WithMany()
                        .HasForeignKey("BeveragePriceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.TransactionAggregate.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.UserAggregate.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.Consumption", b =>
                {
                    b.HasOne("Domain.BeverageAggregate.Entities.BeveragePrice", "BeveragePrice")
                        .WithMany()
                        .HasForeignKey("BeveragePriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.UserAggregate.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.Credit", b =>
                {
                    b.HasOne("Domain.UserAggregate.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserAggregate.Entities.User", b =>
                {
                    b.HasOne("Domain.AddressAggregate.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.PhoneAggregate.Entities.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
